// chiedere all'utente le dimensioni dell'array; 
int dim_a; 
cout << "Inserisci la dimensione dell'array: \n"; 
cin>>dim_a; 

int *p_primo = new int[dim_a]; 
// inizializziamo l'array. 
for (int i = 0; i < dim_a; i++){
	cout << "Valore elemento  ( " << (i + 1) << " \ " << dim_a << "): "; 
	cin>>p_primo[i]; 
}

cout << "Ecco stampato l'array dinamico: \n"; 
for (int i = 0; i < dim_a; i++){
	cout << "Valore elemento ( " << (i + 1) << " \ " << dim_a << "): " << p_primo[i] << endl; 
}

// chiedo all'utente quanti elementi vuole tenere
int da_tenere; 
do{
	cout << "Inserisci numero di elementi dell'array che vuoi preservare: \n"; 
	cin>>da_tenere; 
while (da_tenere < 0 || da_tenere > dim_a); 

// tutti gli elementi che vanno da da_tenere + 1 fino a dim_a vanno deallocati, MA se faccio così la dimensione dell'array non cambia. //Quindi, posso copiare tutti gli elementi che l'utente vuole tenere dentro un altro array, che ha le dimensioni da_tenere. poi dopo lo //stampo e lo dealloco. 
int *p_secondo = new int[da_tenere]; 

for (int i = 0; i < da_tenere; i++){
	p_secondo[i] = p_primo[i]; 


// deallochiamo il primo array
delete[ ] = p_primo; 

cout << "Sotto array: " << endl;
for (int i = 0; i < da_tenere; i++){
	cout << Valore elemento ( " << (i + 1) << " \ " << da_tenere << "): " << p_secondo[i] << endl; 
}

// deallochiamo il secondo array
delete [ ] = p_secondo; 

----------------------------------
algoritmo: 
1. chiedo all'utente di inserire quanti elementi avrà l'array
2. chiedo in input ciascuno di quei valori 
3. creo un array dinamico. e inserisco gli elementi dentro quall'array. 
4. nel main chiamo la funzione e stampo l'array.


